// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @unique @default(uuid())
  /// username
  username String   @unique
  /// passworl
  password String
  /// name
  name     String
  /// email
  email    String   @unique
  worker   Worker[]
  profit   Profit[]

  btc_balace     Float? @default(0)
  balance        Float? @default(0)
  total_earning  Float? @default(0)
  last_profit    Float? @default(0)
  hsashrate      Float? @default(0)
  daily_hashrate Float? @default(0)
  role           Roles  @default(USER)
  hour_hashrate  Float? @default(0)
  bills          Bill[]
}

model Profit {
  id           String   @unique @default(uuid())
  created_at   DateTime @default(now())
  hashrat      String
  total_profit Float

  unit_output      Float
  coin_price       Float
  usd_total_profit Float
  psp_profit       Float
  pplns_profit     Float
  solo_profit      Float
  user_id          String
  user             User   @relation(fields: [user_id], onDelete: Cascade, onUpdate: Cascade, references: [id])
}

model Worker {
  id            String       @id @unique @default(uuid())
  nurmic_id     Int          @default(autoincrement())
  status        WorkerStatus @default(INACTIVE)
  minut_profit  Int
  hour_profit   Int
  rejected_rate Int
  last_submit   DateTime
  user_id       String
  first_submit  DateTime
  user          User         @relation(fields: [user_id], onUpdate: Cascade, onDelete: Cascade, references: [id])
}

model MyAssets {
  id              String   @unique @default(uuid())
  created_at      DateTime
  coin_type       String
  account_balance Float
  market_value    Float
}

model Bill {
  id           String   @unique @default(uuid())
  time         DateTime
  coin_type    String
  type         String
  value_change Float
  balance      Float
  user_id      String
  user         User     @relation(references: [id], fields: [user_id], onDelete: Cascade, onUpdate: Cascade)
}

enum WorkerStatus {
  ACTIVE
  OFFLINE
  INACTIVE
}

enum Roles {
  USER
  ADMIN
}
